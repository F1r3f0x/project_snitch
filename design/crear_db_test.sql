-- MySQL Script generated by MySQL Workbench
-- 03/11/18 10:48:45
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema snitch_test
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `snitch_test` ;

-- -----------------------------------------------------
-- Schema snitch_test
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `snitch_test` DEFAULT CHARACTER SET utf8 ;
USE `snitch_test` ;

-- -----------------------------------------------------
-- Table `snitch_test`.`fuente_noticias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`fuente_noticias` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`fuente_noticias` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre de la fuente de noticias.',
  `url` VARCHAR(256) NOT NULL COMMENT 'URL a la pagina de la fuente',
  `spider_extraccion` VARCHAR(1024) NOT NULL COMMENT 'Script interna del sistema encargada de obtener noticias desde esta fuente.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Fuente o Medio de donde se extraen noticias.';


-- -----------------------------------------------------
-- Table `snitch_test`.`noticia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`noticia` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`noticia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `titulo` VARCHAR(256) NOT NULL COMMENT 'Título de la noticia',
  `contenido_texto` MEDIUMTEXT NULL COMMENT 'Contenido en texto de la noticia para respaldo.',
  `url` VARCHAR(1024) NOT NULL COMMENT 'URL a la noticia',
  `preview_url` VARCHAR(1024) NULL COMMENT 'URL a imagen de preview de la noticia',
  `titulo_buscable` VARCHAR(256) NULL COMMENT 'Titulo en formato buscable para Whoosh.',
  `fecha` DATETIME NOT NULL COMMENT 'Fecha de la noticia.',
  `fuente_noticias_id` INT NOT NULL COMMENT 'Fuente de noticias que ingreso la noticia.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`, `fuente_noticias_id`),
  INDEX `fk_noticia_fuente_noticias1_idx` (`fuente_noticias_id` ASC),
  CONSTRAINT `fk_noticia_fuente_noticias1`
    FOREIGN KEY (`fuente_noticias_id`)
    REFERENCES `snitch_test`.`fuente_noticias` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Noticia';


-- -----------------------------------------------------
-- Table `snitch_test`.`camara`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`camara` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`camara` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre de la cámara.',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Camara del Congreso.';


-- -----------------------------------------------------
-- Table `snitch_test`.`sesion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`sesion` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`sesion` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `numero` INT NOT NULL COMMENT 'Numero de la sesion',
  `camara_id` INT NOT NULL COMMENT 'Cámara a la que pertenece la sesión.',
  `fecha` DATETIME NOT NULL COMMENT 'Fecha de sesión.',
  `nombre` VARCHAR(256) NULL COMMENT 'Nombre de la sesión.',
  `descripcion` VARCHAR(256) NULL COMMENT 'Descripción de la sesión.',
  `numero_asistir` INT NULL COMMENT 'Número de legisladores que deben asistir a la sesión.',
  `porc_asistencia` INT NULL COMMENT 'Porcentaje de asistencia.',
  `numero_asistentes` INT NULL COMMENT 'Numero de asistentes',
  `url` VARCHAR(1024) NOT NULL COMMENT 'Url a la sesión.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_sesion_Camara1_idx` (`camara_id` ASC),
  CONSTRAINT `fk_sesion_Camara1`
    FOREIGN KEY (`camara_id`)
    REFERENCES `snitch_test`.`camara` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Sesion de camara.';


-- -----------------------------------------------------
-- Table `snitch_test`.`proyecto_ley`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`proyecto_ley` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`proyecto_ley` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre del proyecto de ley.',
  `descripcion` VARCHAR(2048) NULL COMMENT 'Descripción del proyecto.',
  `camara_origen_id` INT NOT NULL COMMENT 'Cámara de origen del proyecto,',
  `fecha` DATETIME NOT NULL COMMENT 'Fecha de creación del proyecto.',
  `url` VARCHAR(1024) NOT NULL COMMENT 'URL a pagina del proyecto de ley.',
  `nombre_buscable` VARCHAR(256) NULL COMMENT 'Nombre buscable para Whoosh.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_proyecto_ley_Camara1_idx` (`camara_origen_id` ASC),
  CONSTRAINT `fk_proyecto_ley_Camara1`
    FOREIGN KEY (`camara_origen_id`)
    REFERENCES `snitch_test`.`camara` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Proyecto de ley';


-- -----------------------------------------------------
-- Table `snitch_test`.`tipo_legislador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`tipo_legislador` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`tipo_legislador` (
  `id` INT NOT NULL,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre del tipo de legislador.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Senador o Diputado';


-- -----------------------------------------------------
-- Table `snitch_test`.`partido_politico`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`partido_politico` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`partido_politico` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre del Partido Politico',
  `logo_url` VARCHAR(256) NULL COMMENT 'URL al logo del Partido Politico.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Partidos Politicos';


-- -----------------------------------------------------
-- Table `snitch_test`.`region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`region` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`region` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `numero` VARCHAR(5) NOT NULL COMMENT 'Numero romano de la region.',
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre de la region.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Region de Chile.';


-- -----------------------------------------------------
-- Table `snitch_test`.`estado_noticioso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`estado_noticioso` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`estado_noticioso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre del estado noticioso.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Estados Noticiosos posibles para un legislador.';


-- -----------------------------------------------------
-- Table `snitch_test`.`periodo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`periodo` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`periodo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(512) NOT NULL COMMENT 'Nombre del período',
  `año_inicio` INT NOT NULL COMMENT 'Año de inicio del período.',
  `año_fin` INT NULL COMMENT 'Año de termino del período.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Periodos Legislativos.';


-- -----------------------------------------------------
-- Table `snitch_test`.`legislador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`legislador` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`legislador` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'id legislador',
  `primer_nombre` VARCHAR(256) NOT NULL COMMENT 'Primer Nombre del Legislador',
  `segundo_nombre` VARCHAR(256) NULL COMMENT 'Segundo nombre del Legislador',
  `primer_apellido` VARCHAR(256) NOT NULL COMMENT 'Primer Apellido del Legislador',
  `segundo_apellido` VARCHAR(256) NULL COMMENT 'Segundo Apellido del Legislador.',
  `texto_buscable` VARCHAR(1027) NULL COMMENT 'Cadena de texto para buscar con Whoosh.',
  `sexo` TINYINT(1) NULL COMMENT 'M = true , F = False',
  `email` VARCHAR(1024) NULL COMMENT 'Dirección de Email del Legislador',
  `telefono` VARCHAR(64) NULL COMMENT 'Numero de teléfono del Legislador.',
  `foto_url` VARCHAR(256) NULL COMMENT 'URL a foto del legislador.',
  `buscar_noticias` TINYINT(1) NULL COMMENT 'Flag que indica si se deben buscar noticias de esta persona.',
  `estado_noticioso_id` INT NULL COMMENT 'Estado Noticioso actual del Legislador.',
  `ultimo_tipo_legislador_id` INT NULL COMMENT 'Tipo de legislador del ultimo cargo del legislador.',
  `fecha_ingreso` DATETIME NOT NULL COMMENT 'Fecha de ingreso del legislador al sistema.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_legislador_estado_noticioso1_idx` (`estado_noticioso_id` ASC),
  INDEX `fk_legislador_tipo_legislador1_idx` (`ultimo_tipo_legislador_id` ASC),
  CONSTRAINT `fk_legislador_estado_noticioso1`
    FOREIGN KEY (`estado_noticioso_id`)
    REFERENCES `snitch_test`.`estado_noticioso` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_legislador_tipo_legislador1`
    FOREIGN KEY (`ultimo_tipo_legislador_id`)
    REFERENCES `snitch_test`.`tipo_legislador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Contiene la informacion de un Legislador (Senador o Diputado)';


-- -----------------------------------------------------
-- Table `snitch_test`.`circunscripcion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`circunscripcion` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`circunscripcion` (
  `id` INT NOT NULL,
  `numero` INT(11) NOT NULL COMMENT 'Número de la circunscripción.',
  `antiguo` TINYINT(1) NOT NULL COMMENT 'Flag que marca si es una Circunscripcion antigua (pre 2018).',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Circunscripciones.';


-- -----------------------------------------------------
-- Table `snitch_test`.`cargo_legislativo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`cargo_legislativo` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`cargo_legislativo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `legislador_id` INT NOT NULL COMMENT 'Legislador que tiene este cargo.',
  `remuneracion` DOUBLE NULL COMMENT 'Remuneracion que se recibe por este cargo',
  `tipo_legislador_id` INT NOT NULL COMMENT 'Tipo de cargo (Senador o Diputado)',
  `partido_politico_id` INT NOT NULL COMMENT 'Partido político del cargo.',
  `periodo_id` INT NOT NULL COMMENT 'Período del cargo.',
  `region_id` INT NULL COMMENT 'Región del cargo.',
  `circunscripcion_id` INT NULL COMMENT 'Circunscripción del cargo.',
  `id_interna` INT NULL COMMENT 'Id del cargo legislativo del sistema de la camara de origen.',
  `fecha_ingreso` DATETIME NOT NULL COMMENT 'Fecha de ingreso al sistema del cargo.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_cargo_legislativo_tipo_legislador1_idx` (`tipo_legislador_id` ASC),
  INDEX `fk_cargo_legislativo_partido_politico1_idx` (`partido_politico_id` ASC),
  INDEX `fk_cargo_legislativo_periodo1_idx` (`periodo_id` ASC),
  INDEX `fk_cargo_legislativo_region1_idx` (`region_id` ASC),
  INDEX `fk_cargo_legislativo_legislador1_idx` (`legislador_id` ASC),
  INDEX `fk_cargo_legislativo_circunscripcion1_idx` (`circunscripcion_id` ASC),
  CONSTRAINT `fk_cargo_legislativo_tipo_legislador1`
    FOREIGN KEY (`tipo_legislador_id`)
    REFERENCES `snitch_test`.`tipo_legislador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cargo_legislativo_partido_politico1`
    FOREIGN KEY (`partido_politico_id`)
    REFERENCES `snitch_test`.`partido_politico` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cargo_legislativo_periodo1`
    FOREIGN KEY (`periodo_id`)
    REFERENCES `snitch_test`.`periodo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cargo_legislativo_region1`
    FOREIGN KEY (`region_id`)
    REFERENCES `snitch_test`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cargo_legislativo_legislador1`
    FOREIGN KEY (`legislador_id`)
    REFERENCES `snitch_test`.`legislador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cargo_legislativo_circunscripcion1`
    FOREIGN KEY (`circunscripcion_id`)
    REFERENCES `snitch_test`.`circunscripcion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Periodos legislativos de un legislador.';


-- -----------------------------------------------------
-- Table `snitch_test`.`lista_asistencia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`lista_asistencia` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`lista_asistencia` (
  `sesion_id` INT NOT NULL COMMENT 'Sesion de la lista.',
  `cargo_legislativo_id` INT NOT NULL COMMENT 'Cargo asistente a la sesion.',
  `asistio` TINYINT(1) NOT NULL COMMENT 'El legislador asistio a la sesion?',
  `justificado` TINYINT(1) NULL COMMENT 'La inasistencia es justificada?',
  `desc_justificacion` VARCHAR(1024) NULL COMMENT 'Descripcion de la justificacion.',
  PRIMARY KEY (`sesion_id`, `cargo_legislativo_id`),
  INDEX `fk_sesionhaslegislador_sesion1_idx` (`sesion_id` ASC),
  INDEX `fk_lista_asistencia_cargo_legislativo1_idx` (`cargo_legislativo_id` ASC),
  CONSTRAINT `fk_sesionhaslegislador_sesion1`
    FOREIGN KEY (`sesion_id`)
    REFERENCES `snitch_test`.`sesion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_lista_asistencia_cargo_legislativo1`
    FOREIGN KEY (`cargo_legislativo_id`)
    REFERENCES `snitch_test`.`cargo_legislativo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Lista de asistencia de una Sesiom.';


-- -----------------------------------------------------
-- Table `snitch_test`.`votacion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`votacion` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`votacion` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `sesion_id` INT NOT NULL COMMENT 'Sesión en la que se realiza la votacion.',
  `proyecto_ley_id` INT NULL COMMENT 'Proyecto de ley que se vota.',
  `descripcion` VARCHAR(2048) NOT NULL COMMENT 'Descripcion de la votacion.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_votacion_sesion1_idx` (`sesion_id` ASC),
  INDEX `fk_votacion_proyecto_ley1_idx` (`proyecto_ley_id` ASC),
  CONSTRAINT `fk_votacion_sesion1`
    FOREIGN KEY (`sesion_id`)
    REFERENCES `snitch_test`.`sesion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_votacion_proyecto_ley1`
    FOREIGN KEY (`proyecto_ley_id`)
    REFERENCES `snitch_test`.`proyecto_ley` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Votacion para un proyecto en una sesion.';


-- -----------------------------------------------------
-- Table `snitch_test`.`voto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`voto` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`voto` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre del tipo de voto.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tipo de voto.';


-- -----------------------------------------------------
-- Table `snitch_test`.`noticia_legislador`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`noticia_legislador` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`noticia_legislador` (
  `noticia_id` INT NOT NULL COMMENT 'Noticia en la que aparece el legislador.',
  `legislador_id` INT NOT NULL COMMENT 'Legislador que aparece en noticia.',
  PRIMARY KEY (`noticia_id`, `legislador_id`),
  INDEX `fk_legisladorhasnoticia_noticia1_idx` (`noticia_id` ASC),
  INDEX `fk_noticias_persona_legislador1_idx` (`legislador_id` ASC),
  CONSTRAINT `fk_legisladorhasnoticia_noticia1`
    FOREIGN KEY (`noticia_id`)
    REFERENCES `snitch_test`.`noticia` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_noticias_persona_legislador1`
    FOREIGN KEY (`legislador_id`)
    REFERENCES `snitch_test`.`legislador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Noticias del legislador.';


-- -----------------------------------------------------
-- Table `snitch_test`.`tipo_usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`tipo_usuario` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`tipo_usuario` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Nombre del tipo de usuario.',
  `nombre` VARCHAR(256) NOT NULL COMMENT 'Nombre del tipo de usuario.',
  `activo` TINYINT(1) NOT NULL COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tipo de usuario del sistema';


-- -----------------------------------------------------
-- Table `snitch_test`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`usuario` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `tipo_usuario_id` INT NOT NULL COMMENT 'Tipo de Usuario (Editor, admin , etc.)',
  `nombre` VARCHAR(255) NOT NULL COMMENT 'Nombre de usuario.',
  `email` VARCHAR(255) NOT NULL COMMENT 'Dirección de email del usuario.',
  `password_hash` VARCHAR(4096) NOT NULL COMMENT 'Hash + Salt de la contraseña del usuario.',
  `fecha_registro` DATETIME NOT NULL COMMENT 'Fecha de registro del usuario.',
  `fecha_confirmacion` DATETIME NULL COMMENT 'Fecha de recibo de email de confimación del usuario.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_usuario_tipo_usuario1_idx` (`tipo_usuario_id` ASC),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  CONSTRAINT `fk_usuario_tipo_usuario1`
    FOREIGN KEY (`tipo_usuario_id`)
    REFERENCES `snitch_test`.`tipo_usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Usuario del sistema';


-- -----------------------------------------------------
-- Table `snitch_test`.`favorito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`favorito` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`favorito` (
  `usuario_id` INT NOT NULL COMMENT 'Usuario al que pertenece el favorito',
  `legislador_id` INT NOT NULL COMMENT 'Legislador a seguir',
  `fecha` DATETIME NOT NULL COMMENT 'Fecha de agregado a favoritos.',
  PRIMARY KEY (`usuario_id`, `legislador_id`),
  INDEX `fk_usuariohaslegislador_usuario1_idx` (`usuario_id` ASC),
  INDEX `fk_favorito_persona1_idx` (`legislador_id` ASC),
  CONSTRAINT `fk_usuariohaslegislador_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `snitch_test`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_favorito_persona1`
    FOREIGN KEY (`legislador_id`)
    REFERENCES `snitch_test`.`legislador` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Relacion entre usuario y sus legisladores favoritos.';


-- -----------------------------------------------------
-- Table `snitch_test`.`distrito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`distrito` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`distrito` (
  `id` INT NOT NULL,
  `numero` INT NOT NULL COMMENT 'Número de distrito.',
  `antiguo` TINYINT(1) NOT NULL COMMENT 'Flag que marca si es un distrito antiguo (pre 2018).',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Distritos.';


-- -----------------------------------------------------
-- Table `snitch_test`.`distrito_cargo_legislativo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`distrito_cargo_legislativo` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`distrito_cargo_legislativo` (
  `distrito_id` INT NOT NULL COMMENT 'Distrito del cargo',
  `cargo_legislativo_id` INT NOT NULL COMMENT 'Cargo que posee el distrito.',
  PRIMARY KEY (`distrito_id`, `cargo_legislativo_id`),
  INDEX `fk_distritohascargo_legislativo_cargo_legislativo1_idx` (`cargo_legislativo_id` ASC),
  INDEX `fk_distritohascargo_legislativo_distrito1_idx` (`distrito_id` ASC),
  CONSTRAINT `fk_distritohascargo_legislativo_distrito1`
    FOREIGN KEY (`distrito_id`)
    REFERENCES `snitch_test`.`distrito` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_distritohascargo_legislativo_cargo_legislativo1`
    FOREIGN KEY (`cargo_legislativo_id`)
    REFERENCES `snitch_test`.`cargo_legislativo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Distritos de un legislador en un periodo legislativo.';


-- -----------------------------------------------------
-- Table `snitch_test`.`circunscripcion_distrito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`circunscripcion_distrito` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`circunscripcion_distrito` (
  `distrito_id` INT NOT NULL COMMENT 'Distrito de circunscripción.',
  `circunscripcion_id` INT NOT NULL COMMENT 'Circunscripción.',
  PRIMARY KEY (`distrito_id`, `circunscripcion_id`),
  INDEX `fk_distritohascircunscripcion_circunscripcion1_idx` (`circunscripcion_id` ASC),
  INDEX `fk_distritohascircunscripcion_distrito1_idx` (`distrito_id` ASC),
  CONSTRAINT `fk_distritohascircunscripcion_distrito1`
    FOREIGN KEY (`distrito_id`)
    REFERENCES `snitch_test`.`distrito` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_distritohascircunscripcion_circunscripcion1`
    FOREIGN KEY (`circunscripcion_id`)
    REFERENCES `snitch_test`.`circunscripcion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Distritos de una Circunscripcion';


-- -----------------------------------------------------
-- Table `snitch_test`.`autores_proyecto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`autores_proyecto` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`autores_proyecto` (
  `cargo_legislativo_id` INT NOT NULL COMMENT 'Cargo legislativo autor del proyecto.',
  `proyecto_ley_id` INT NOT NULL COMMENT 'Proyecto de ley que pertenece al cargo.',
  PRIMARY KEY (`cargo_legislativo_id`, `proyecto_ley_id`),
  INDEX `fk_cargo_legislativohasproyecto_ley_proyecto_ley1_idx` (`proyecto_ley_id` ASC),
  INDEX `fk_cargo_legislativohasproyecto_ley_cargo_legislativo1_idx` (`cargo_legislativo_id` ASC),
  CONSTRAINT `fk_cargo_legislativohasproyecto_ley_cargo_legislativo1`
    FOREIGN KEY (`cargo_legislativo_id`)
    REFERENCES `snitch_test`.`cargo_legislativo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cargo_legislativohasproyecto_ley_proyecto_ley1`
    FOREIGN KEY (`proyecto_ley_id`)
    REFERENCES `snitch_test`.`proyecto_ley` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Lista de legisladores autores de un proyecto de ley.';


-- -----------------------------------------------------
-- Table `snitch_test`.`lista_votos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`lista_votos` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`lista_votos` (
  `votacion_id` INT NOT NULL COMMENT 'Votacion del voto.',
  `cargo_legislativo_id` INT NOT NULL COMMENT 'Cargo legislativo que vota.',
  `voto_id` INT NOT NULL COMMENT 'Tipo de voto.',
  PRIMARY KEY (`votacion_id`, `cargo_legislativo_id`),
  INDEX `fk_votacionhascargo_legislativo_cargo_legislativo1_idx` (`cargo_legislativo_id` ASC),
  INDEX `fk_votacionhascargo_legislativo_votacion1_idx` (`votacion_id` ASC),
  INDEX `fk_votos_voto1_idx` (`voto_id` ASC),
  CONSTRAINT `fk_votacionhascargo_legislativo_votacion1`
    FOREIGN KEY (`votacion_id`)
    REFERENCES `snitch_test`.`votacion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_votacionhascargo_legislativo_cargo_legislativo1`
    FOREIGN KEY (`cargo_legislativo_id`)
    REFERENCES `snitch_test`.`cargo_legislativo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_votos_voto1`
    FOREIGN KEY (`voto_id`)
    REFERENCES `snitch_test`.`voto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Lista de votos de una votacion.';


-- -----------------------------------------------------
-- Table `snitch_test`.`pareo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`pareo` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`pareo` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `votacion_id` INT NOT NULL COMMENT 'Votacion a la que pertenece el pareo.',
  `activo` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Esta activo en el sistema?',
  PRIMARY KEY (`id`),
  INDEX `fk_votacionhascargo_legislativo_votacion2_idx` (`votacion_id` ASC),
  CONSTRAINT `fk_votacionhascargo_legislativo_votacion2`
    FOREIGN KEY (`votacion_id`)
    REFERENCES `snitch_test`.`votacion` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Pareo en votación.';


-- -----------------------------------------------------
-- Table `snitch_test`.`lista_pareado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`lista_pareado` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`lista_pareado` (
  `pareo_id` INT NOT NULL COMMENT 'Pareo al que pertence el cargo.',
  `cargo_legislativo_id` INT NOT NULL COMMENT 'Cargo en pareo.',
  PRIMARY KEY (`pareo_id`, `cargo_legislativo_id`),
  INDEX `fk_pareohascargo_legislativo_cargo_legislativo1_idx` (`cargo_legislativo_id` ASC),
  INDEX `fk_pareohascargo_legislativo_pareo1_idx` (`pareo_id` ASC),
  CONSTRAINT `fk_pareohascargo_legislativo_pareo1`
    FOREIGN KEY (`pareo_id`)
    REFERENCES `snitch_test`.`pareo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pareohascargo_legislativo_cargo_legislativo1`
    FOREIGN KEY (`cargo_legislativo_id`)
    REFERENCES `snitch_test`.`cargo_legislativo` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Lista de legisladores en el pareo.';


-- -----------------------------------------------------
-- Table `snitch_test`.`proyecto_siguiendo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `snitch_test`.`proyecto_siguiendo` ;

CREATE TABLE IF NOT EXISTS `snitch_test`.`proyecto_siguiendo` (
  `proyecto_ley_id` INT NOT NULL COMMENT 'Proyecto de ley que sigue el usuario.',
  `usuario_id` INT NOT NULL COMMENT 'Usuario que sigue el proyecto.',
  `fecha` DATETIME NOT NULL COMMENT 'Fecha de inicio de seguimiento.',
  PRIMARY KEY (`proyecto_ley_id`, `usuario_id`),
  INDEX `fk_proyecto_leyhasusuario_usuario1_idx` (`usuario_id` ASC),
  INDEX `fk_proyecto_leyhasusuario_proyecto_ley1_idx` (`proyecto_ley_id` ASC),
  CONSTRAINT `fk_proyecto_leyhasusuario_proyecto_ley1`
    FOREIGN KEY (`proyecto_ley_id`)
    REFERENCES `snitch_test`.`proyecto_ley` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_proyecto_leyhasusuario_usuario1`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `snitch_test`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Proyecto de ley seguido por el usuario.';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
